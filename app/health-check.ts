// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã GraphQL —Å–µ—Ä–≤–µ—Ä–∞
import { createSchema } from 'graphql-yoga';
import { typeDefs } from '@/server/graphql/typeDefs';
import { resolvers } from '@/server/graphql/resolvers';
import { scalars } from '@/server/graphql/scalars';
import { mergeResolvers } from '@/server/graphql/mergeResolvers';

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Ö–µ–º—ã GraphQL
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
 */
export async function checkGraphQLSchema() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã GraphQL...');
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑–æ–ª–≤–µ—Ä—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤ –µ–¥–∏–Ω—ã–π –æ–±—ä–µ–∫—Ç
    const mergedResolvers = resolvers.reduce((acc, resolver) => {
      return { ...acc, ...resolver };
    }, {});
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É
    const schema = createSchema({
      typeDefs,
      resolvers: {
        ...mergedResolvers,
        ...scalars,
      }
    });
    
    console.log('‚úÖ –°—Ö–µ–º–∞ GraphQL –≤–∞–ª–∏–¥–Ω–∞!');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã GraphQL:', error);
    return false;
  }
}
